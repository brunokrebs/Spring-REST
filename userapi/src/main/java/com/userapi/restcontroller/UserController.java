package com.userapi.restcontroller;import java.util.List;import javax.annotation.PostConstruct;import org.json.simple.JSONObject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.util.UriComponentsBuilder;import com.userapi.entity.User;import com.userapi.exception.ApiError;import com.userapi.jpa.UserService;import com.userapi.search.UserSearch;import com.userapi.simplejson.SimpleJSON;@RestControllerpublic class UserController {	@Autowired	UserService userService;	@Autowired	UserSearch userSearch;		@Autowired	SimpleJSON simpleJSON;		@RequestMapping(value = "/user", method = RequestMethod.GET)	public ResponseEntity<?> listAllUsers() {		List<User> userList = userService.findAll();		if (userList.size() == 0) {			ApiError apiError = new ApiError("No data", "User table is empty");			return new ResponseEntity<JSONObject>(simpleJSON.getErrorJSON(apiError), HttpStatus.NOT_FOUND);		}		return new ResponseEntity<JSONObject>(simpleJSON.getUserJSON(userList), HttpStatus.OK);	}	@PostConstruct	public String insertUser() {		User user = new User();		user.setFname("Nischal");		user.setLname("Dallu");		user.setAddress("Shakya");		user.setContact("9841808707");		userService.save(user);		return "sucess";	}	@RequestMapping(value = "/user", method = RequestMethod.POST)	public ResponseEntity<Void> createUser(@RequestBody User user, UriComponentsBuilder ucBuilder) {		System.out.println("Creating User " + user.getFname());		userService.save(user);		HttpHeaders headers = new HttpHeaders();		headers.setLocation(ucBuilder.path("/user/{id}").buildAndExpand(user.getUserid()).toUri());		return new ResponseEntity<Void>(headers, HttpStatus.CREATED);	}	@RequestMapping(value = "/user/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)	public ResponseEntity<?> getUser(@PathVariable("id") int id) {		System.out.println("Fetching User with id " + id);		User user = userService.findOne(id);		if (user == null) {			ApiError apiError = new ApiError("Not found", "User with id " + id + " not found");			return new ResponseEntity<ApiError>(apiError, HttpStatus.NOT_FOUND);		}		return new ResponseEntity<User>(user, HttpStatus.OK);	}	@RequestMapping(value = "/user/search/{searchTxt}", method = RequestMethod.GET)	public ResponseEntity<?> getUserSearch(@PathVariable("searchTxt") String searchText) {		System.out.println("Getting User from search controller");		List<User> users = userSearch.search(searchText);		if (users.size() == 0) {			ApiError apiError = new ApiError("user info not found",					"User information with " + searchText + " not found");			return new ResponseEntity<ApiError>(apiError, HttpStatus.NOT_FOUND);		}		return new ResponseEntity<List<User>>(users, HttpStatus.OK);	}	@RequestMapping(value = "/user/{id}", method = RequestMethod.PUT)	public ResponseEntity<?> updateUser(@PathVariable("id") int id, @RequestBody User user) {		System.out.println("Updating User " + id);		User currentUser = userService.findOne(id);		if (currentUser == null) {			ApiError apiError = new ApiError("userinfo not found", "User with id " + id + " not found");			return new ResponseEntity<ApiError>(apiError, HttpStatus.NOT_FOUND);		}		currentUser.setFname(user.getFname());		currentUser.setLname(user.getLname());		currentUser.setAddress(user.getAddress());		currentUser.setContact(user.getContact());		userService.save(currentUser);		return new ResponseEntity<User>(currentUser, HttpStatus.OK);	}	@RequestMapping(value = "/user/{id}", method = RequestMethod.DELETE)	public ResponseEntity<?> deleteUser(@PathVariable("id") int id) {		System.out.println("Fetching & Deleting User with id " + id);		User user = userService.findOne(id);		if (user == null) {			ApiError apiError = new ApiError("userinfo not found", "User with id " + id + " not found");			return new ResponseEntity<ApiError>(apiError, HttpStatus.NOT_FOUND);		}		userService.delete(id);		return new ResponseEntity<User>(HttpStatus.NO_CONTENT);	}	@RequestMapping(value = "/deleteall", method = RequestMethod.DELETE)	public ResponseEntity<User> deleteAllUsers() {		System.out.println("Deleting All Users");		userService.deleteAll();		return new ResponseEntity<User>(HttpStatus.NO_CONTENT);	}}