package com.userapi.restcontroller;import java.util.List;import javax.annotation.PostConstruct;import org.json.simple.JSONObject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PutMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.util.UriComponentsBuilder;import com.userapi.entity.User;import com.userapi.exception.ApiError;import com.userapi.search.UserSearch;import com.userapi.service.UserService;/** * @author nischal * */@CrossOrigin("*")@RestControllerpublic class UserController {	@Autowired	private UserService userService;	@Autowired	private UserSearch userSearch;	@GetMapping("/user")	public ResponseEntity<?> listAllUsers() {		JSONObject userJsonObject = userService.findAll();		if (userJsonObject.keySet().contains("data") == false) {			return new ResponseEntity<JSONObject>(userJsonObject, HttpStatus.NOT_FOUND);		}		return new ResponseEntity<JSONObject>(userJsonObject, HttpStatus.OK);	}	@PostConstruct	public String insertUser() {		User user = new User();		user.setFname("Nischal");		user.setLname("Dallu");		user.setAddress("Shakya");		user.setContact("9841808707");		userService.insert(user);		return "sucess";	}	@RequestMapping(value = "/user", method = RequestMethod.POST)	public ResponseEntity<Void> createUser(@RequestBody User user, UriComponentsBuilder ucBuilder) {		userService.insert(user);		HttpHeaders headers = new HttpHeaders();		headers.setLocation(ucBuilder.path("/user/{id}").buildAndExpand(user.getUserid()).toUri());		return new ResponseEntity<Void>(headers, HttpStatus.CREATED);	}	@GetMapping("/user/{id}")	public ResponseEntity<?> getUser(@PathVariable("id") int id) {		JSONObject userJsonObject = userService.findOne(id);		if (userJsonObject.keySet().contains("data") == false) {			return new ResponseEntity<JSONObject>(userJsonObject, HttpStatus.NOT_FOUND);		}		return new ResponseEntity<JSONObject>(userJsonObject, HttpStatus.OK);	}	@RequestMapping(value = "/user/search/{searchTxt}", method = RequestMethod.GET)	public ResponseEntity<?> getUserSearch(@PathVariable("searchTxt") String searchText) {		System.out.println("Getting User from search controller");		List<User> users = userSearch.search(searchText);		if (users.size() == 0) {			ApiError apiError = new ApiError("user info not found",					"User information with " + searchText + " not found");			return new ResponseEntity<ApiError>(apiError, HttpStatus.NOT_FOUND);		}		return new ResponseEntity<List<User>>(users, HttpStatus.OK);	}	@PutMapping("/user/{id}")	public ResponseEntity<?> updateUser(@PathVariable("id") int id, @RequestBody User user) {		user.setUserid(id);		JSONObject currentUser = userService.findOne(id);		if (currentUser == null) {			ApiError apiError = new ApiError("userinfo not found", "User with id " + id + " not found");			return new ResponseEntity<ApiError>(apiError, HttpStatus.NOT_FOUND);		}		userService.update(user);		return new ResponseEntity<JSONObject>(currentUser, HttpStatus.OK);	}	@DeleteMapping("/user/{id}")	public ResponseEntity<?> deleteUser(@PathVariable("id") int id) {		userService.delete(id);		return new ResponseEntity<User>(HttpStatus.NO_CONTENT);	}}